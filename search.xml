<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文本编码那些事</title>
      <link href="/2019/01/24/textencode/"/>
      <url>/2019/01/24/textencode/</url>
      
        <content type="html"><![CDATA[<p>程序猿都遇到过文本编码问题，看到GB2312,GBK,GB18030,Unicode,UTF-8就觉得头大。希望通过此文，可以对文本编码可以有一个透彻的了解。</p><a id="more"></a><p>计算机发明之初为英文服务的，英文字符集十分有限，使用一个char就可以表示了。</p><p>但是随着计算机的发展，ASCII就没有办法支持中文等国家的文字；于是乎就有了GB2312中文编码，同样日文，韩文等都有属于自己的编码，想要在中文系统查看其它国家的文件就需要再按照另外的编码方式解码文件；如果各国文字混编就无能为力了。这种就需要一个一统江湖的编码标准来解决这个问题，即Unicode。</p><p>Unicode规定了每个数字对应的文字是什么，但是只是一个标准而已，为了解决文件编码之后空间大小问题，就有了不同的编码方式，即UTF-8，UTF-16，UTF-32. 就好比数字1，可以用char，short，int存，但是明显用char存更省空间。</p><p><img src="textencode.png" alt="编码关系"></p><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p><img src="ascii.jpg" alt=""></p><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。</p><p>ASCII 码使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符。标准ASCII 码也叫基础ASCII码，使用7 位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0 到9、标点符号， 以及在美式英语中使用的特殊控制字符。</p><p>比如0x41表示英文字母A</p><h2 id="GB2312-GBK-GB18030"><a href="#GB2312-GBK-GB18030" class="headerlink" title="GB2312,GBK,GB18030"></a>GB2312,GBK,GB18030</h2><p>GB2312，GBK，GB18030都是中文的三种编码方式，按照包含文字数据由大到小依次为GB18030，GBK，GB2312；同时GB18030兼容GBK，GBK由兼容GB2312.</p><table><thead><tr><th>编码</th><th>字符数</th><th>字符种类</th><th>存储方式</th><th>兼容性</th></tr></thead><tbody><tr><td>GB2312</td><td>6763</td><td>常见汉字</td><td>双字节</td><td>兼容ASCII</td></tr><tr><td>GBK</td><td>21886</td><td>GB2312的汉字，Big5繁体字，其他</td><td>双字节</td><td>兼容GB2312</td></tr><tr><td>GB18030</td><td>70244</td><td>GBK的汉字，少数民族的汉字，日韩汉字</td><td>单字节，双字节，四字节</td><td>兼容GBK</td></tr></tbody></table><h3 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h3><p>GB 2312中对所收汉字进行了分区处理，每区含有94个汉字/符号，共计94个区。用所在的区和位来表示字符（实际上就是码位），因此称为区位码（或许叫区位号更为恰当）。表示方式也称为区位码。例如“万”字在45区82位，所以“万”字的区位码是：45 82（注意，GB类汉字编码为双字节编码，因此，45相当于高位字节，82相当于低位字节）。</p><p><strong>可以理解为GB2312是一个二维数组，<code>GB2312[45][82]=万</code></strong>。</p><ul><li>01~09区（682个）：特殊符号、数字、英文字符、制表符等，包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母等在内的682个全角字符；</li><li>10~15区：空区，留待扩展；在附录3，第10区推荐作为 GB 1988–80 中的94个图形字符区域（即第3区字符之半形版本）。</li><li>16~55区（3755个）：常用汉字（也称一级汉字），按拼音排序；</li><li>56~87区（3008个）：非常用汉字（也称二级汉字），按部首/笔画排序；</li><li>88~94区：空区，留待扩展。</li></ul><p>每个汉字/符号使用两个字节表示，第一个字节成为高位字节，第二字节成为低位字节。高位字节使用0xA1-0xF7，即01-87的区号加上0xA0，低字节使用0xA1-0xFE，即把01-94加上0xA0。</p><p>举例: GB2312中第一个常用汉字是”啊”，即16区的第1个汉字是”啊”, 可以理解为<code>GB2312[16][1]=啊</code>，实际存储的时候，第一个字节为0xA0+16=0xB0, 第二个字节为0xA0+1 = 0xA1, 所以在GB2312编码中，0xB0 0xA1表示汉字”啊”。</p><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><p>GBK向下与 GB 2312 完全兼容，向上支持 ISO 10646 国际标准即UCS，在前者向后者过渡过程中起到的承上启下的作用。</p><p>GBK 采用双字节表示，总体编码范围为 8140-FEFE 之间，首字节在 81-FE 之间，尾字节在 40-FE 之间，剔除 XX7F 一条线。GBK 编码区分三部分：</p><ol><li>汉字区　包括<br>GBK/2：OXBOA1-F7FE, 收录 GB 2312 汉字 6763 个，按原序排列；<br>GBK/3：OX8140-AOFE，收录 CJK 汉字 6080 个；<br>GBK/4：OXAA40-FEAO，收录 CJK 汉字和增补的汉字 8160 个。</li><li>图形符号区　包括<br>GBK/1：OXA1A1-A9FE，除 GB 2312 的符号外，还增补了其它符号<br>GBK/5：OXA840-A9AO，扩除非汉字区。</li><li>用户自定义区<br>GBK 区域中的空白区，用户可以自己定义字符。</li></ol><h3 id="GB18030"><a href="#GB18030" class="headerlink" title="GB18030"></a>GB18030</h3><p>GB 18030 与 GB 2312-1980 和 GBK 兼容，共收录汉字70244个。</p><ul><li><p>与 UTF-8 相同，采用多字节编码，每个字可以由 1 个、2 个或 4 个字节组成。</p></li><li><p>编码空间庞大，最多可定义 161 万个字符。</p></li><li><p>支持中国国内少数民族的文字，不需要动用造字区。</p></li><li><p>汉字收录范围包含繁体汉字以及日韩汉字</p></li></ul><p>GB 18030 编码是一二四字节变长编码。</p><ul><li>单字节，其值从 0 到 0x7F，与 ASCII 编码兼容。</li><li>双字节，第一个字节的值从 0x81 到 0xFE，第二个字节的值从 0x40 到 0xFE（不包括0x7F），与 GBK 标准兼容。</li><li>四字节，第一个字节的值从 0x81 到 0xFE，第二个字节的值从 0x30 到 0x39，第三个字节从0x81 到 0xFE，第四个字节从 0x30 到 0x39。</li></ul><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。</p><p>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是 Unicode，就像它的名字都表示的，这是一种所有符号的编码。</p><p>Unicode 当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字严。具体的符号对应表，可以查询<a href="http://www.unicode.org/" target="_blank" rel="noopener">unicode.org</a>，或者专门的<a href="http://www.chi2ko.com/tool/CJK.htm" target="_blank" rel="noopener">汉字对应表</a>。</p><p>Unicode编码范围是：0-0x10FFFF，可以容纳1114112个字符. 曾经有UCS-2，双字节编码，只支持65536个字符。</p><p>全世界的字符根本用不完了，Unicode 5.0版本中，才用了238605个码位。所以足够了。</p><p>因此从码位范围看，严格的unicode需要3个字节来存储。但是考虑到理解性和计算机处理的方便性，理论上还是用4个字节来描述。</p><h2 id="UTF-8，UTF-16，UTF-32"><a href="#UTF-8，UTF-16，UTF-32" class="headerlink" title="UTF-8，UTF-16，UTF-32"></a>UTF-8，UTF-16，UTF-32</h2><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8（UCS Transformation Format 8bit)，这个方案的意思以8位为单位来标识文字，注意并不是说一个文字用8位标识。他其实是一种MBCS方案，可变字节的。到底需要几个字节表示一个符号，这个要根据这个符号的unicode编码来决定，最多4个字节。</p><p>编码规则如下：</p><table><thead><tr><th>Unicode编码(16进制)</th><th>UTF-8 字节流(二进制)</th></tr></thead><tbody><tr><td>000000 - 00007F</td><td>0xxxxxxx</td></tr><tr><td>000080 - 0007FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>000800 - 00FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>010000 - 10FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>UTF-8的特点是对不同范围的字符使用不同长度的编码。对于0x00-0x7F之间的字符，UTF-8编码与ASCII编码完全相同。</p><p> UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位0x10FFFF也只有21位。 　　</p><ul><li><p>例1：“汉”字的Unicode编码是0x6C49。0x6C49在0x0800-0xFFFF之间，使用用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。将0x6C49写成二进制是：0110 1100 0100 1001， 用这个比特流依次代替模板中的x，得到：1110011010110001 10001001，即E6 B1 89。 　　</p></li><li><p>例2：Unicode编码0x20C30在0x010000-0x10FFFF之间，使用用4字节模板了：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。将0x20C30写成21位二进制数字（不足21位就在前面补0）：0 0010 0000 1100 0011 0000，用这个比特流依次代替模板中的x，得到：11110000 10100000 10110000 10110000，即F0 A0 B0 B0。</p></li></ul><h3 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h3><p>UTF16就好理解了，在这个规则下，每个符号最少占16bit。UTF16的规则说起来更简单，当符号位于0000-0xFFFF(BMP)中时，占用2byte，在符号位于0x10000-0x10FFFF(辅助平面)时，占用4byte。</p><p>UTF16这个转换的算法又是怎样的呢？</p><ol><li>辅助平面的码位是U+10000到U+10FFFF，我们得到了一个辅助平面的Unicode码时，先减去BMP的码数0x10000，得到的数介于0到0xFFFFF之间，最多用20bit表示</li><li>然后我们把20bit从中间隔开，分为高位的10bit和低位的10bit</li><li>我们知道10bit的取值范围是0到0x3FF，高位的10bit加上固定值0xD800，得到的值叫做前导代理（lead surrogate），范围是0xD800到0xDBFF</li><li>低位的10bit加上固定值0xDC00，得到的值叫做后尾代理（tail surrogate），范围是0xDC00到0xDFFF。这样一来，不仅高位和低位都落在了保留区块内，而且彼此还做了区分。</li></ol><p>　　还是举个例子。</p><p>　　Unicode码位是U+24B62是个异体字，通“碎”，位于辅助平面，我们来算一下它的UTF16编码结果</p><ol><li>首先0x24B62减去10000得到0x14B62，根据这5个byte得到20bit，0001 0100 1011 0110 0010</li><li>然后分成高位的10bit（0001010010）和低位的10bit（1101100010）</li><li>高位+0xD800得到（1101 1000 0101 0010）</li><li>低位+0xDC00得到（1101 1111 0110 0010）</li><li>转换为16进制就是0xD852和0xDF62，这就是这个字的UTF16表示。</li></ol><h3 id="UTF-32"><a href="#UTF-32" class="headerlink" title="UTF-32"></a>UTF-32</h3><p>这个就简单了，和Unicode码表基本一一对应，固定四个字节。</p><p>为什么不采用UTF-32呢，因为unicode定义的范围太大了，其实99%的人使用的字符编码不会超过2个字节，所以如同统一用4个字节，简单倒是简单了，但是数据冗余确实太大了，不好，所以16位是最好的。就算遇到超过16位能表示的字符，我们也可以通过上面讲到的代理技术，采用32位标识，这样的方案是最好的。所以现在绝大部分机器实现unicode还是采用的utf-16的方案。当然也有UTF-8的方案。比如windows用的就是UTF16方案，不少linux用的就是utf8方案。</p><h2 id="烫烫烫，屯屯屯，锟斤拷"><a href="#烫烫烫，屯屯屯，锟斤拷" class="headerlink" title="烫烫烫，屯屯屯，锟斤拷"></a>烫烫烫，屯屯屯，锟斤拷</h2><p>相信很多人在windows平台遇到过”烫烫烫”，”屯屯屯”，”锟斤铐”等乱码。</p><p>在Windows下,未初始化的栈会初始化为0xcc, 未初始化的堆内存会初始化为0xcd, 而’烫’的gbk编码为0xCC 0xCC,而’屯’的gbk编码为0xCD 0xCD。</p><p>unicode暂时没用到码点会用占位符FFFD来表示, 如果这个占位符被错误解析, 就会被当作有意义的内容了。</p><p>unicode码0xFFFD的utf8编码为0xEF 0xBF 0xDB，汉字”锟斤拷”的gbk编码分别为0XEF 0xBF, oxDB 0xEF和0xBF 0xDB, 正好是两组unicode码0xFFFD的utf8编码的叠加。 </p><p>因此如果平时遇到多个utf8编码的Unicode占位符且不巧用了gbk的方式解码,那就会看到熟悉的锟斤拷了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>struct库的使用</title>
      <link href="/2019/01/13/struct/"/>
      <url>/2019/01/13/struct/</url>
      
        <content type="html"><![CDATA[<p>在解析自定义的二进制的文件格式，或者已知的一些文件格式的时候，比如png图片，tcp包，就需要struct库；</p><p>解析二进制文件长需要的函数有从buffer中读取char(一个字节)，short(两个字节)，int(4字节)，string(n个char)，这些struct都可以很好的胜任。<a href="https://docs.python.org/2/library/struct.html" target="_blank" rel="noopener">官方说明</a></p><a id="more"></a><p>struct生成或者解析二进制的使用方法，很像格式化输出，即使用特定的字符来输出自己想要的格式；</p><h2 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h2><p><code>except</code>：<code>struct.error</code> </p><p><code>struct.pack(fmt,v1,v2,...)</code>: 返回以<code>fmt</code>格式指定的<code>v1,v2,…</code>组成的string; 要求<code>v1,v2,...</code>能够严格匹配<code>fmt</code></p><p><code>struct.pack_into(fmt,buffer,offset,v1,v2,...)</code>: 从buffer的offset处，组成以<code>fmt</code>格式指定组成的<code>v1,v2,...</code></p><p><code>struct.unpack(fmt,string)</code>: 使用<code>fmt</code>解析string，返回结果为tuple，即使只包含一个值。要求<code>len(string)</code>与<code>calcsize(fmt)</code>相同</p><p><code>struct.unpack_from(fmt,buffer[,offset=0])</code>: 从buffer的offset处开始以<code>fmt</code>指定的格式解析，返回结果为tuple，要求<code>len(buffer[offset:])&gt;=calcsize(fmt)</code></p><p><code>struct.calcsize(fmt)</code>: 计算给定格式的字节大小</p><p>fmt可以指定字节序，字符类型等</p><h2 id="大小端"><a href="#大小端" class="headerlink" title="大小端"></a>大小端</h2><p>做过相关网络数据包开发的都接触过本地序和网络序；</p><p>对于网络序，使用的大端序(big endian)。</p><p>本地序跟CPU相关</p><ol><li><p>对于Intel X86和AMD64(X86-64)都是小端序(little-endian)</p></li><li><p>Motorola 68000 和 PowerPC G5是大端序</p></li><li><p>对于ARM和Intel Itanium 是双端序</p></li></ol><p>可以使用<code>sys.byteorder</code>来获取当前系统的类型。</p><p>那么什么是大端序，小端序？</p><p>大端序：数据的高位字节存放在地址的低端，低位字节存放在地址的高端</p><p>小端序：数据的高位自己存放在地址的高端，低位字节存放在地址的低端</p><p>数据的高位和低位：举例，<code>int a = 0x12345678</code>, 坐标<code>12</code>是高位字节，右边<code>78</code>是低位字节，从左到右，从高到低；</p><p>地址的高端和低端(假设是64位机器，一个地址是64位)：</p><p><code>0x00000001</code></p><p><code>0x00000002</code></p><p><code>0x00000003</code></p><p><code>0x00000004</code></p><p>从上到下，由低到高，地址值小的为低端，地址值大的为高端。</p><p>假设从地址<code>0x00000001</code>开始存储数<code>0x12345678</code>，则</p><p>大端序存放方式(按原来顺序存放):</p><p><code>0x00000001</code>    –<code>12</code></p><p><code>0x00000002</code>    –<code>34</code></p><p><code>0x00000003</code>    –<code>56</code></p><p><code>0x00000004</code>    –<code>78</code></p><p>小端序存放方式(按颠倒顺序存放)：</p><p><code>0x00000001</code>    –<code>78</code></p><p><code>0x00000002</code>    –<code>56</code></p><p><code>0x00000003</code>    –<code>34</code></p><p><code>0x00000004</code>    –<code>12</code></p><p>struct可以指定使用大端序还是小端序来解析或者生成数据。</p><table><thead><tr><th>Character</th><th>Byte order</th><th>Size</th><th>Alignment</th></tr></thead><tbody><tr><td>@</td><td>native</td><td>native</td><td>native</td></tr><tr><td>=</td><td>native</td><td>standard</td><td>none</td></tr><tr><td>&lt;</td><td>little-endian</td><td>standard</td><td>none</td></tr><tr><td>&gt;</td><td>big-endian</td><td>standard</td><td>none</td></tr><tr><td>!</td><td>network(=big-endian)</td><td>standard</td><td>none</td></tr></tbody></table><p>如果不指定，<code>@</code>是默认值。</p><p>Native size和alignment由C语言的<code>sizeof</code>表达式决定,  即结构体的字节对齐规则。<a href="https://www.cnblogs.com/clover-toeic/p/3853132.html" target="_blank" rel="noopener">C语言的字节对齐问题</a></p><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><table><thead><tr><th>Format</th><th>C Type</th><th>Python type</th><th>Standard size</th><th>Notes</th></tr></thead><tbody><tr><td>x</td><td>pad byte</td><td>no value</td><td></td><td></td></tr><tr><td>c</td><td>char</td><td>string of length 1</td><td>1</td><td></td></tr><tr><td>b</td><td>signed char</td><td>integer</td><td>1</td><td>(3)</td></tr><tr><td>B</td><td>unsigned char</td><td>integer</td><td>1</td><td>(3)</td></tr><tr><td>?</td><td>_Bool</td><td>bool</td><td>1</td><td>(1)</td></tr><tr><td>h</td><td>short</td><td>integer</td><td>2</td><td>(3)</td></tr><tr><td>H</td><td>unsigned short</td><td>integer</td><td>2</td><td>(3)</td></tr><tr><td>i</td><td>int</td><td>integer</td><td>4</td><td>(3)</td></tr><tr><td>I</td><td>unsigned int</td><td>integer</td><td>4</td><td>(3)</td></tr><tr><td>l</td><td>long</td><td>integer</td><td>4</td><td>(3)</td></tr><tr><td>L</td><td>unsigned long</td><td>integer</td><td>4</td><td>(3)</td></tr><tr><td>q</td><td>long long</td><td>integer</td><td>8</td><td>(2),(3)</td></tr><tr><td>Q</td><td>unsigned long long</td><td>integer</td><td>8</td><td>(2),(3)</td></tr><tr><td>f</td><td>float</td><td>float</td><td>4</td><td>(4)</td></tr><tr><td>d</td><td>double</td><td>float</td><td>8</td><td>(4)</td></tr><tr><td>s</td><td>char[]</td><td>string</td><td></td><td></td></tr><tr><td>p</td><td>char[]</td><td>string</td><td></td><td></td></tr><tr><td>P</td><td>void *</td><td>integer</td><td></td><td>(5),(3)</td></tr></tbody></table><p>Notes:</p><ol><li><p><code>?</code> 是C99中的<code>_Bool</code>, 如果不可用， 则生成<code>char</code>, 一个字节；</p></li><li><p><code>q</code>和<code>Q</code>只用当C编译器支持<code>long long</code>;</p></li><li><p>当pack一个非integer类型的时候，如果此非integer有<code>__index__()</code>函数，则pack<code>__init__()</code>的返回值；若没有<code>__index__()</code>或者调用<code>__index__()</code>报异常，则尝试<code>__int__()</code>函数，若没有<code>__int__()</code>则报<code>DeprecationWarning</code>;</p></li><li><p>对于浮点类型，<code>f</code>使用IEEE 754 binary32，<code>d</code>使用binary64标准</p></li><li><p><code>P</code>只在native byte ordering使用</p></li><li><p><code>4h</code>等价于<code>hhhh</code></p></li><li><p><code>&#39;10s&#39;</code>代表  10-byte string, <code>&#39;10c&#39;</code> 代表 10 characters</p></li><li><p><code>p</code> 即<code>Pascal string</code>, 第一个字节代表长度，随后是字符串</p></li></ol><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>示例在big-endian机器，以native byte order,size, alignment </p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt;&gt;&gt; <span class="keyword">from</span> struct <span class="keyword">import</span> *</span><br><span class="line">&gt; &gt;&gt;&gt; pack(<span class="string">'hhl'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&gt; <span class="string">'\x00\x01\x00\x02\x00\x00\x00\x03'</span></span><br><span class="line">&gt; &gt;&gt;&gt; unpack(<span class="string">'hhl'</span>, <span class="string">'\x00\x01\x00\x02\x00\x00\x00\x03'</span>)</span><br><span class="line">&gt; (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&gt; &gt;&gt;&gt; calcsize(<span class="string">'hhl'</span>)</span><br><span class="line">&gt; <span class="number">8</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytesUtil</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bytes_to_int</span><span class="params">(byte_s)</span>:</span></span><br><span class="line">        <span class="comment"># little_endian</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> reversed(byte_s):</span><br><span class="line">            result = result * <span class="number">256</span> + int(b)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_byte</span><span class="params">(buffer, offset)</span>:</span></span><br><span class="line">        value = struct.unpack_from(<span class="string">"B"</span>, buffer, offset)[<span class="number">0</span>]</span><br><span class="line">        offset += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> value, offset</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_short</span><span class="params">(buffer, offset)</span>:</span></span><br><span class="line">        value = struct.unpack_from(<span class="string">"H"</span>, buffer, offset)[<span class="number">0</span>]</span><br><span class="line">        offset += <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> value, offset</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int</span><span class="params">(buffer, offset)</span>:</span></span><br><span class="line">        value = struct.unpack_from(<span class="string">"I"</span>, buffer, offset)[<span class="number">0</span>]</span><br><span class="line">        offset += <span class="number">4</span></span><br><span class="line">        <span class="keyword">return</span> value, offset</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int24</span><span class="params">(buffer, offset)</span>:</span></span><br><span class="line">        value, offset = BytesUtil.get_byte_n(<span class="number">3</span>, buffer, offset)</span><br><span class="line">        <span class="keyword">return</span> BytesUtil.bytes_to_int(value), offset</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_byte_n</span><span class="params">(n, buffer, offset)</span>:</span></span><br><span class="line">        value = struct.unpack_from(<span class="string">"%dB"</span> % (n), buffer, offset)</span><br><span class="line">        offset += n</span><br><span class="line">        <span class="keyword">return</span> value, offset</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_short_n</span><span class="params">(n, buffer, offset)</span>:</span></span><br><span class="line">        value = struct.unpack_from(<span class="string">"%dH"</span> % (n), buffer, offset)</span><br><span class="line">        offset += <span class="number">2</span>*n</span><br><span class="line">        <span class="keyword">return</span> value, offset</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int_n</span><span class="params">(n, buffer, offset)</span>:</span></span><br><span class="line">        value = struct.unpack_from(<span class="string">"%dI"</span> % (n), buffer, offset)</span><br><span class="line">        offset += <span class="number">4</span>*n</span><br><span class="line">        <span class="keyword">return</span> value, offset</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
